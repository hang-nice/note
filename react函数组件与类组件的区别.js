// 作为组件 在显示上函数组件与类组件是一样的,在呈现上与性能上没有区别
// 设计模式上,类组件是面向对象的 可以继承 有生命周期函数.函数组件是函数式编程主要特点是immutable(不可更改)
// 没有副作用引用透明等特点
// react hooks出现之前需要使用生命周期组件使用类组件.
// react hooks的出现使生命周期概念淡出,函数组件可以替代类组件.
// 官方更加推崇组合优于继承的设计模式 类组件在继承方面优势淡出.函数组件可以捕获render内部状态,函数组件与数据绑定在一起
// 性能优化上类组件靠react.shouldCompontentUpdate阻断渲染提升性能.函数组件依赖memo缓存渲染结果提升性能.
// 由于类组件在生命周期带来的复杂度并不易于优化,而函数组件本身轻量简单且因为hooks提供了比原先更细粒度的逻辑组织与复用
// 更加利于在时间切片与并发模式中的使用
// setState是否异步
// setState 并非真的异步只是看起来像是异步 ，react源码中通过isBatchingUpdtes判断setState是先存进队列还是直接更新。
//为true则是异步更新 false则直接更新。
// 在合成事件与生命周期中都会合并操作，延迟跟新操作
// 在原生事件react无法控制到的地方执行同步更新
// 异步设计是为了使性能优化 减少渲染次数,state同步更新时state是同步的 props不是              